package hbv7d.hdv7d_ui.controller;

import hbv7d.api.Api;
import hbv7d.hdv7d_ui.view.View;
import hbv7d.hdv7d_ui.view.ViewSwitcher;
import hbv7d.model.Tour;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;

import javax.swing.*;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;




public class CreateTourController {
    @FXML
    private TextField nameField;

    @FXML
    private TextArea descriptionArea;

    @FXML
    private TextField locationField;

    @FXML
    private TextField priceField;

    @FXML
    private DatePicker datePicker;

    @FXML
    private TextField durationField;

    @FXML
    private TextField groupSizeField;

    @FXML
    private TextField difficultyField;

    @FXML
    private TextField typeField;

    @FXML
    private CheckBox pickupCheckBox;




    //Harðkóðað í bili
    private int companyId = 1;
    public void onBack(ActionEvent actionEvent) {
        ViewSwitcher.switchTo_WithSize(View.COMPANY, false, 800, 1600);
    }

    public void onOkay(ActionEvent actionEvent) {
        try {
            // Extract values from input fields.
            String name = nameField.getText();
            String description = descriptionArea.getText();
            String location = locationField.getText();
            int price = Integer.parseInt(priceField.getText());
            LocalDate localDate = datePicker.getValue();
            if (localDate == null) {
                throw new IllegalArgumentException("Please select a date.");
            }
            // Convert LocalDate to Date.
            Date date = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            int duration = Integer.parseInt(durationField.getText());
            int groupSize = Integer.parseInt(groupSizeField.getText());
            String difficulty = difficultyField.getText();
            String type = typeField.getText();
            boolean pickup = pickupCheckBox.isSelected();

            // Create a new Tour.
            // Note: The Tour constructor takes a tourId, but here we set it to 0 (or any dummy value) since it's generated by the database.
            // We pass null for the host (Company) because Api.addTour will set the host based on the provided companyId.
            Tour newTour = new Tour(0, name, description, location, price, date, duration, groupSize, difficulty, type, pickup, null);

            // Call the API to add the tour to the specified company.
            boolean success = Api.addTour(companyId, newTour);

            // Inform the user about the outcome.
            Alert alert;
            if (success) {
                alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Tour Created");
                alert.setHeaderText("Tour has been created successfully.");
                // Optionally, switch back to the company view.
                ViewSwitcher.switchTo_WithSize(View.COMPANY, false, 800, 1600);
            } else {
                alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Creation Failed");
                alert.setHeaderText("Tour creation failed. Please try again.");
            }
            alert.showAndWait();

        } catch (Exception e) {
            // If any exception occurs (e.g., parsing error), show an error dialog.
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Input Error");
            alert.setHeaderText("Invalid input detected.");
            alert.setContentText(e.getMessage());
            alert.showAndWait();
        }
    }
}
